(define-syntax delay
  (syntax-rules ()
                                        ;  ((_ exp) (memo-proc (lambda () exp)))))
    ((_ exp) (lambda () exp))))
(define (memo-proc proc)
  (let ((already-run? #f) (result #f))
    (lambda()
      (if (not already-run?)
          (begin (set! result (proc))
                 (set! already-run? #t)
                 result)
          result))))
(define-syntax cons-stream
  (syntax-rules ()
    ((_ a b) (cons a (delay b)))))
(define (stream-filter pred stream)
  (cond ((stream-null? stream) the-empty-stream)
        ((pred (stream-car stream))
         (cons-stream (stream-car stream)
                      (stream-filter pred (stream-cdr stream))))
        (else (stream-filter pred (stream-cdr stream)))))
(define (stream-car stream) (car stream))
(define (stream-cdr stream) (force (cdr stream)))
(define (force delayed-object)
  (delayed-object))
(define the-empty-stream `())
(define stream-null? null?)
(define (stream-ref s n)
  (if (= n 0)
      (stream-car s)
      (stream-ref (stream-cdr s) (- n 1))))
(define (stream-map proc s)
  (if (stream-null? s)
      the-empty-stream
      (cons-stream (proc (stream-car s))
                   (stream-map proc (stream-cdr s)))))
(define (stream-for-each proc s)
  (if (stream-null? s)
      `done
      (begin (proc (stream-car s))
             stream-for-each proc (stream-cdr s))))
(define (display-stream s)
  (stream-for-each display-line s))
(define (display-line x)
  (newline)
  (display x))
(define (stream-enumerate-interval low high)
  (if (> low high)
      the-empty-stream
      (cons-stream
       low
       (stream-enumerate-interval (+ low 1) high))))
(define (show x)
  (display-line x)
  x)
(define sum 0)
(print "The value of sum is")
(print sum)
(define (accum x)
  (set! sum (+ x sum))
  sum)
(define seq (stream-map accum (stream-enumerate-interval 1 20)))
(print "The value of sum after seq is")
(print sum)
(define y (stream-filter even? seq))
(print "The value of sum after y is")
(print sum)
(define z (stream-filter (lambda (x)(= (remainder x 5) 0))
                         seq))
(print "The value of sum after z is")
(print sum)
(print "The value of stream-ref 7 is")
(print (stream-ref y 7))
(print "The value of sum after stream-ref 7 is")
(print sum)
(print "The value of display-stream z is")
(display-stream z)
(print "")
(print "The value of sum after display-stream z is")
(print sum)
