(define (func-recursive n)
  (if (< n 3)
      n
      (+ (func-recursive (- n 1)) (* 2 (func-recursive (- n 2))) (* 3 (func-recursive (- n 3))) )
      ))

(print (func-recursive 0))
(print (func-recursive 1))
(print (func-recursive 2))
(print (func-recursive 3))
(print (func-recursive 4))
(print (func-recursive 5))
(print (func-recursive 6))
(print (func-recursive 7))

(define (func-linear-recursive n)
  (define (func-linear-recursive-iter n counter f1 f2 f3)
    (if (< n counter)
        f1
        (cond ((= counter 0)
               (func-linear-recursive-iter n (+ counter 1) 0 0 0))
              ((= counter 1)
               (func-linear-recursive-iter n (+ counter 1) 1 0 0))
              ((= counter 2)
               (func-linear-recursive-iter n (+ counter 1) 2 1 0))
            (else (func-linear-recursive-iter n (+ counter 1) (+ f1 (* 2 f2) (* 3 f3)) f1 f2))
            )))
  (func-linear-recursive-iter n 0 0 0 0))

(print (func-linear-recursive 0))
(print (func-linear-recursive 1))
(print (func-linear-recursive 2))
(print (func-linear-recursive 3))
(print (func-linear-recursive 4))
(print (func-linear-recursive 5))
(print (func-linear-recursive 6))
(print (func-linear-recursive 7))
