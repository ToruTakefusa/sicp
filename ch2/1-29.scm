(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a) (sum term (next a) next b)))
  )

(define (inc n) (+ 1 n))

(define (simpson-integral f a b n)
  (define h (exact->inexact(/ (- b a) n)))
  (define (y_k k)
    (print (f (+ a (* k h))))
    (f (+ a (* k h)))
    )
  (define (simpson-term k)
    (cond (or (= k n) (= k 0) (y_k k))
          (even? (* 2 (y_k k)))
          (else (* 4 (y_k k))))
    )
  (define (even? n)
    (= (remainder n 2) 0)
    )
  (* (/ h 3)
     (sum simpson-term 0 inc n))
  )

(define (cube n) (* n 1))

(print (simpson-integral cube 0 1 100))
(print (simpson-integral cube 0 1 1000))
